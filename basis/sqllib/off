
//var reBool = regexp.MustCompile("tinyint")
//var reInt = regexp.MustCompile("int")
//var reDate = regexp.MustCompile("time")
//var reFloat = regexp.MustCompile("float|decimal")

//func AddTablesData(dbh *sql.DB, tables map[string]string, data map[string][]DataRow) error {
//	var stmt *sql.Stmt
//	for k, v := range data {
//		t := tables[k]
//		if t == "" {
//			return nil.Errorf("there is no table for key '%s'", k)
//		}
//
//		fieldsType := map[string]string{}
//		tFields, err := TableFields(dbh, t)
//		if err != nil {
//			return err
//		}
//		for _, f := range tFields {
//			fieldsType[f.Nickname] = f.Type
//		}
//		for _, fs := range v {
//			var valAll []interface{}
//			sqlQuery := "replace into `" + t + "` ("
//			qm := ""
//			for i, f := range fs.Fields {
//				if qm != "" {
//					sqlQuery += ","
//					qm += ","
//				}
//				sqlQuery += " `" + f + "`"
//				qm += " ?"
//				if f == "password" {
//					pass, err := encryption.GetEncodedPassword(fs.Data[i], encryption.SHA256)
//					if err != nil {
//						return err
//					}
//					fs.Data[i] = string(pass.Passhash)
//				}
//
//				if reBool.MatchString(fieldsType[f]) {
//					if fs.Data[i] == "true" {
//						fs.Data[i] = "1"
//					}
//					if fs.Data[i] == "false" || fs.Data[i] == "" {
//						fs.Data[i] = "0"
//					}
//					if fs.Data[i] != "1" && fs.Data[i] != "0" {
//						return nil.New("can't convert to boolean: '" + fs.Data[i] +
//							"' in json file for table '" + t + "." + f + "'")
//					}
//				} else if reInt.MatchString(fieldsType[f]) {
//					_, err = strconv.ParseInt(fs.Data[i], 10, 64)
//					if err != nil {
//						return nil.New("can't convert to integer: '" + fs.Data[i] + "' in json file for table '" + t + "." + f + "'")
//					}
//				} else if reFloat.MatchString(fieldsType[f]) {
//					_, err = strconv.ParseFloat(fs.Data[i], 64)
//					if err != nil {
//						return nil.New("can't convert to float: '" + fs.Data[i] + "' in json file for table '" + t + "." + f + "'")
//					}
//				} else if reDate.MatchString(fieldsType[f]) {
//					_, err = time.Parse(time.RFC3339, fs.Data[i])
//					if err != nil {
//						return nil.New("can't convert to datetime: '" + fs.Data[i] + "' in json file for table '" + t + "'")
//					}
//				}
//				valAll = append(valAll, fs.Data[i])
//			}
//			sqlQuery += ") values (" + qm + ")"
//			if err := CreateStmt(dbh, sqlQuery, &stmt); err != nil {
//				return nil.Wrapf(err, "can't prepare SQL: %s", sqlQuery)
//			}
//			if _, err := stmt.Exec(valAll...); err != nil {
//				return nil.Wrapf(err, "can't insert data: %s / %v", sqlQuery, valAll)
//			}
//		}
//	}
//	return nil
//}

//// ParseInfo ...
//func ParseInfo(dbh *sql.DB, info []Info, tables map[string][]MySQLField, tablesIndexes map[string][]MySQLIndex) error {
//	for _, i := range info {
//		if i.Status == TableNotExists {
//			//	need create table i.LocalPath
//			if fields, ok := tables[i.LocalPath]; ok {
//				var indexes []MySQLIndex
//				if indexes, ok = tablesIndexes[i.LocalPath]; !ok {
//					indexes = []MySQLIndex{}
//				}
//				err := CreateTable(dbh, i.LocalPath, fields, indexes)
//				if err != nil {
//					return nil.Wrapf(err, "can't create table: %s", i.LocalPath)
//				}
//				log.Println("table `", i.LocalPath, "` was created")
//			} else {
//				return nil.New("can't find fields data for create table " + i.LocalPath)
//			}
//		}
//	}
//	return nil
//}
//

//func ReIndexTable(dbh *sql.DB, table string, tableIndexes []sqllib.SQLIndex) error {
//
//	// drop old indexes
//	indexes, err := TableIndexes(dbh, table)
//	if err != nil {
//		return errors.Wrapf(err, "can't get indexes for table: %v", table)
//	}
//	for _, i := range indexes {
//		if strings.ToUpper(i.Type) == "PRIMARY" {
//			continue
//		}
//		if err = DropTableIndex(dbh, table, i.Name); err != nil {
//			return err
//		}
//	}
//	// add new indexes
//	if len(tableIndexes) < 1 {
//		return errors.New("can't find new indexes for table: " + table)
//	}
//	for _, i := range tableIndexes {
//		if strings.ToUpper(i.Type) == "PRIMARY" {
//			continue
//		}
//		if err = AddTableIndex(dbh, table, i.Name, i.Type, i.Fields); err != nil {
//			return err
//		}
//	}
//	return nil
//}


//func InitDB() (bool, string, error) {
//
//	// read default params for db connect
//	err := godotenv.Load("../.env")
//	if err != nil {
//		var ErrNoENV = errors.New("Err loading .env filelib")
//		return false, "", ErrNoENV
//	}
//	useDefault, _ := strconv.ParseBool(os.Getenv("DB_USE_DEFAULT"))
//	port := os.Getenv("DB_PORT")
//	host := os.Getenv("DB_HOST")
//	name := os.Getenv("DB_NAME")
//	user := os.Getenv("DB_USER")
//	password := os.Getenv("DB_PASSWORD")
//
//	//"user:password@tcp(127.0.0.1:3306)/hello")
//
//	addr := user + ":" + password + "@tcp(" + host + ":" + port + ")/" + name
//
//	return useDefault, addr, nil
//}

//func Count(dbh *sql.DB, selector selectors.Selector, joinTo crud.JoinTo, groupBy, sortBy []string) ([]crud.Count, error) {
//	condition, values, err := selectors.Mysql(selector)
//	if err != nil {
//		return nil, nil.Wrapf(err, ": bad selector ('%v')", selector)
//	}
//	for k, v := range values {
//		if value, ok := v.(auth.IDentity); ok {
//			values[k] = string(value)
//		}
//	}
//	if condition != "" {
//		condition = " where " + condition
//	}
//	gb := strings.Join123(groupBy, "`,`")
//	sb := strings.Join123(sortBy, "`,`")
//	sqlQuery := "select `" + joinTo.ByField + "`, count(*) as cnt, `" + gb + "` from `" + joinTo.ToTable + "` " + condition +
//		"group by `" + gb + "` order by `" + sb + "`"
//	stmt, err := dbh.Prepare(sqlQuery)
//	if err != nil {
//		return nil, nil.Wrapf(err, "can't prepare (sql='%v')", sqlQuery)
//	}
//  defer stmt.Close()
//	rows, err := stmt.Query(values...)
//	if rows != nil {
//		defer rows.Close()
//	}
//	if err != nil {
//		if err == sql.ErrNoRows {
//			return nil, basis.ErrNotFound
//		}
//		return nil, nil.Wrapf(err, "can't get query (sql='%v', values='%v')", sqlQuery, values)
//	}
//	countAll := []crud.Count{}
//	for rows.Next() {
//		arr := make([]string, len(groupBy))
//		r := crud.Count{Label: arr}
//		var desc = []interface{}{&r.Nickname, &r.Count}
//		for i := 0; i < len(groupBy); i++ {
//			desc = append(desc, &r.Label[i])
//		}
//		if err := rows.Scan(desc...); err != nil {
//			return countAll, nil.Wrapf(err, "can't scan queryRow (sql='%v', values='%v')", sqlQuery, values)
//		}
//		countAll = append(countAll, r)
//	}
//	return countAll, nil
//}


//
//func MysqlDB(dbPart string, dbKey string) *sql.DB {
//	if db, ok := db_[dbKey]; ok {
//		return db
//	}
//
//	dbA := DbAccess(dbPart, dbKey)
//	if dbA == nil {
//		basis.Log("/MysqlDB: no access data")
//		return nil
//	}
//
//	port := ":3306"
//	if strings.Contains(dbA.serverhttp_jschmhr, ":") {
//		port = ""
//	}
//
//	addr := dbA.user + ":" + dbA.password +
//		"@tcp(" + dbA.serverhttp_jschmhr + port + ")/" + dbA.name
//
//	db, err := sql.Open("mysql", addr)
//	if err != nil {
//		Log("/sql.Open: mysql", addr, err)
//		return nil
//	}
//
//	err = db.Ping()
//	if err != nil {
//		Log("/db.Ping:", err)
//		return nil
//	}
//
//	db_[dbKey] = db
//	return db
//}

//func Read(data []byte) error {
//	var config map[string]interface{}
//	err := json5.Unmarshal(data, &config)
//	if err != nil {
//		return nil.Wrapf(err, "error reading json: %v", string(data))
//	}
//
//	for k, v0 := range config {
//		k = strings.ToLower(k)
//
//		if k[:5] == "mysql" {
//			mysqlKey := k[6:]
//			conn := MySQLConfig{}
//			var conn0 map[string]string
//
//			switch v := v0.(type) {
//			case map[string]string:
//				conn0 = v
//			case map[string]interface{}:
//				conn0 = make(map[string]string)
//				for fk, fv0 := range v {
//					switch fv := fv0.(type) {
//					case string:
//						conn0[fk] = fv
//					case []byte:
//						conn0[fk] = string(fv)
//					case float64, float32:
//						conn0[fk] = fmt.Sprintf("%.0f", fv)
//					default:
//						fmt.Printf("bad config value %v[%v] (typeof v, v): %v, %v\n", mysqlKey, fk, reflect.TypeOf(fv), fv)
//						continue
//					}
//				}
//			default:
//				fmt.Printf("bad config value %v (typeof v, v): %v, %v\n", mysqlKey, reflect.TypeOf(v0), v0)
//				continue
//			}
//
//			for fk, fv := range conn0 {
//				fk = strings.ToLower(fk)
//				if fk == "host" || fk == "domain" {
//					conn.Host = fv
//				} else if fk == "port" {
//					conn.Port = fv
//				} else if fk == "user" || fk == "client" {
//					conn.User = fv
//				} else if fk == "pass" || fk == "passwd" || fk == "password" {
//					conn.Pass = fv
//				} else if fk == "database" || fk == "db" {
//					conn.Database = fv
//				}
//			}
//			Mysql[mysqlKey] = conn
//
//		} else {
//			switch v := v0.(type) {
//			case string:
//				Data[k] = v
//			case []byte:
//				Data[k] = string(v)
//			case float64, float32:
//				Data[k] = fmt.Sprintf("%.3f", v)
//				// no integer values in JSON, only float
//			case bool:
//				Flags[k] = v
//			default:
//				fmt.Printf("bad config value %v (typeof v, v): %v, %v\n", k, reflect.TypeOf(v), v)
//			}
//		}
//	}
//
//	return nil
//}

//func (obj *ObjectsMySQL) DistinctField(confidenter auth.IDentity, field string, selector selectors.Selector) (map[string]int64, error) {
//
//	idString := confidenter.String()
//	condition, values, err := selectors.Mysql(selector)
//	if err != nil {
//		return nil, nil.Wrapf(err, ": bad selector ('%v')", selector)
//	}
//	for k, v := range values {
//		if value, ok := v.(auth.IDentity); ok {
//			values[k] = string(value)
//		}
//	}
//	sqlQuery := "select `" + field + "`, count(*) as cnt from `" + obj.objectTable + "` "
//	var rows *sql.Rows
//	valuesAll := append([]interface{}{}, values...)
//	rows, err = obj.ctrl.QueryAccessible(obj.dbh, idString, sqlQuery, condition, "group by `"+field+"` order  by `"+field+"`", valuesAll)
//	if rows != nil {
//		defer rows.Close()
//	}
//	if err != nil {
//		return nil, err
//	}
//	fieldValues := map[string]int64{}
//	for rows.Next() {
//		var value string
//		var cnt int64
//		if err := rows.Scan(&value, &cnt); err != nil {
//			return fieldValues, nil.Wrapf(err, "can't scan queryRow (sql='%s', values='%v')", sqlQuery+" where "+condition, valuesAll)
//		}
//		fieldValues[value] = cnt
//	}
//	return fieldValues, nil
//}
